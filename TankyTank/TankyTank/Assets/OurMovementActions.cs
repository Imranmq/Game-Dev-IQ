//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/OurMovementActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OurMovementActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OurMovementActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""OurMovementActions"",
    ""maps"": [
        {
            ""name"": ""movement"",
            ""id"": ""db2c80c2-f735-4800-9c52-554ea2475c94"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dca8ee78-939f-4bd9-8d48-82f33766060c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToothniMovement"",
                    ""type"": ""Value"",
                    ""id"": ""04aaf4b4-c09e-40c2-9ccb-9c05df1184d5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseEvents"",
                    ""type"": ""Button"",
                    ""id"": ""f11c1662-f7c4-4331-94d6-dbf6669d4f88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a59e1366-94c7-4f6e-b530-8a1e4ef8bb47"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b32a1607-237f-4bbf-91f7-929041e8ff2b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""110a7b2b-a76c-46c8-96b2-8cf49f0d43d2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a92ddf05-72b7-40b4-bd72-d67107e43807"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c498814e-cc84-4722-9779-60084eaf6120"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""90fa4823-01a2-4fa4-9b00-d1a13bc36185"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToothniMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""c544b9bf-84d9-4934-b0c6-bc58f77e7b21"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToothniMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""a3d9c610-4b2f-468b-beb0-55174730ad57"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToothniMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d9c54dbb-3a72-494d-bf8e-3843804dfa11"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseEvents"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""gameActions"",
            ""id"": ""f3cf7cfa-6e71-4546-8ccc-ac34e482af91"",
            ""actions"": [
                {
                    ""name"": ""SpawnPlayer"",
                    ""type"": ""Value"",
                    ""id"": ""cf77cf75-908b-4285-bb05-dddfb8e73a39"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ad44591-bc56-486e-abf0-4d8aee10d835"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SpawnPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // movement
        m_movement = asset.FindActionMap("movement", throwIfNotFound: true);
        m_movement_Move = m_movement.FindAction("Move", throwIfNotFound: true);
        m_movement_ToothniMovement = m_movement.FindAction("ToothniMovement", throwIfNotFound: true);
        m_movement_MouseEvents = m_movement.FindAction("MouseEvents", throwIfNotFound: true);
        // gameActions
        m_gameActions = asset.FindActionMap("gameActions", throwIfNotFound: true);
        m_gameActions_SpawnPlayer = m_gameActions.FindAction("SpawnPlayer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movement
    private readonly InputActionMap m_movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_movement_Move;
    private readonly InputAction m_movement_ToothniMovement;
    private readonly InputAction m_movement_MouseEvents;
    public struct MovementActions
    {
        private @OurMovementActions m_Wrapper;
        public MovementActions(@OurMovementActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_movement_Move;
        public InputAction @ToothniMovement => m_Wrapper.m_movement_ToothniMovement;
        public InputAction @MouseEvents => m_Wrapper.m_movement_MouseEvents;
        public InputActionMap Get() { return m_Wrapper.m_movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @ToothniMovement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnToothniMovement;
                @ToothniMovement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnToothniMovement;
                @ToothniMovement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnToothniMovement;
                @MouseEvents.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMouseEvents;
                @MouseEvents.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMouseEvents;
                @MouseEvents.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMouseEvents;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @ToothniMovement.started += instance.OnToothniMovement;
                @ToothniMovement.performed += instance.OnToothniMovement;
                @ToothniMovement.canceled += instance.OnToothniMovement;
                @MouseEvents.started += instance.OnMouseEvents;
                @MouseEvents.performed += instance.OnMouseEvents;
                @MouseEvents.canceled += instance.OnMouseEvents;
            }
        }
    }
    public MovementActions @movement => new MovementActions(this);

    // gameActions
    private readonly InputActionMap m_gameActions;
    private IGameActionsActions m_GameActionsActionsCallbackInterface;
    private readonly InputAction m_gameActions_SpawnPlayer;
    public struct GameActionsActions
    {
        private @OurMovementActions m_Wrapper;
        public GameActionsActions(@OurMovementActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnPlayer => m_Wrapper.m_gameActions_SpawnPlayer;
        public InputActionMap Get() { return m_Wrapper.m_gameActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActionsActions set) { return set.Get(); }
        public void SetCallbacks(IGameActionsActions instance)
        {
            if (m_Wrapper.m_GameActionsActionsCallbackInterface != null)
            {
                @SpawnPlayer.started -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnSpawnPlayer;
                @SpawnPlayer.performed -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnSpawnPlayer;
                @SpawnPlayer.canceled -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnSpawnPlayer;
            }
            m_Wrapper.m_GameActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpawnPlayer.started += instance.OnSpawnPlayer;
                @SpawnPlayer.performed += instance.OnSpawnPlayer;
                @SpawnPlayer.canceled += instance.OnSpawnPlayer;
            }
        }
    }
    public GameActionsActions @gameActions => new GameActionsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnToothniMovement(InputAction.CallbackContext context);
        void OnMouseEvents(InputAction.CallbackContext context);
    }
    public interface IGameActionsActions
    {
        void OnSpawnPlayer(InputAction.CallbackContext context);
    }
}
